1. 기본 설정
  1) application.yml
      - DB 생성 및 connection관리
      - DB에서 데이터베이스 미리 생성( ex) empstressmeasure )
      - ddl-auto: create 상태에서 프로젝트를 실행하면 관련 테이블 자동 생성 (employees/measure)
      - 'create' 상태일때는 새로 실행할때마다 테이블이 새로 생성되어 데이터가 사라짐
         > 첫 실행 이후 ddl-auto: update 변경

  2) 페이징
     - JPA Pageable 객체 사용

  3) 검색
     - JPA Repository에서 JPQL 사용해서 사번 or 사원명을 함께 검색할수 있는 쿼리 작성
     - 이후 select박스로 사번과 사원을 분리 사용시에는 해당 문법을 활용해서 작성 가능
     - searchKeyword 유무에 따른 if 조건문으로 조회목록 구분 (MainController.java 참고)
     - 페이징과 연동되어 검색결과에 따라 페이징 갯수도 조정됨


2. 근로자
  1) 입력 데이터 : empNo(사번) / name(사원명) -> entity 추가 가능
  2) 등록/수정/삭제 -> ajax 처리 (resource/static/js/app/employees.js 참고)
  3) 등록 :  공백 or null / 사번 중복 처리 완료 (employees.js 과 employees/list.html 하단 스크립트 참고)
  4) 근로자 목록 행번호
     - pk id값이 아닌 목록에서 보이는 전체게시물 넘버링
     - 쿼리에서 rownum 처리를 하려고 했으나 타임리프에서 제공해주는 문법으로 변경
     - JPA Pageable 요소를 사용해서 처리함


3. 측정
  1) mapping : 근로자(1) : 측정(n) 양방향
  2) 입력 데이터 : empNo(사번) / status(스트레스링 여부)
  3) 수정/삭제 -> ajax 처리 (measure.js 참고)
  4) Postmapping - > json 
	{
   		"empNo" : "7777",
    		"status" : "1"
	}
  5) employees 테이블에 없는 사번(empNo)으로는 POST 불가 (500error) > 처리 필요함
  6) 등록을 제외한 상세/수정/삭제는 VIEW단에서 확인 가능

